openapi: 3.1.0
info:
  title: Ongaku Music Server API
  description: |
    A REST API for managing and querying a music library database.

    This API provides endpoints for:
    - Browsing tracks with pagination and filtering
    - Searching across tracks, artists, albums, and genres
    - Retrieving individual track details
    - Streaming audio files with HTTP range support
    - Accessing album artwork images
    - Getting library statistics
    - Managing music library rescans
    - Last.fm integration for scrobbling and authentication

    The server automatically scans a configured music directory and extracts metadata and album art from audio files.

    Last.fm integration allows users to:
    - Authenticate with their Last.fm accounts
    - Scrobble tracks when played
    - Update "now playing" status

    To use Last.fm features, you'll need to set LASTFM_API_KEY and LASTFM_SHARED_SECRET environment variables.
  version: 1.0.0
  contact:
    name: Ongaku Music Server
  license:
    name: MIT
servers:
  - url: https://ongaku-dev.m3r.dev/api/v1
    description: Local development server
paths:
  /tracks:
    get:
      summary: List tracks with pagination and optional filters
      description: |
        Retrieve a paginated list of tracks from the music library.
        Supports filtering by title, artist, album, genre, and album artist.
        Results are ordered by artist, album, then title.
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: Number of tracks per page (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: title
          in: query
          description: Filter by track title (partial match)
          required: false
          schema:
            type: string
        - name: artist
          in: query
          description: Filter by artist name (partial match)
          required: false
          schema:
            type: string
        - name: album
          in: query
          description: Filter by album name (partial match)
          required: false
          schema:
            type: string
        - name: genre
          in: query
          description: Filter by genre (partial match)
          required: false
          schema:
            type: string
        - name: album_artist
          in: query
          description: Filter by album artist (partial match)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response with track list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Tracks

  /tracks/{id}:
    get:
      summary: Get track by ID
      description: Retrieve a specific track by its unique identifier
      parameters:
        - name: id
          in: path
          description: Track ID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful response with track details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '404':
          description: Track not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Tracks

  /tracks/{id}/play:
    get:
      summary: Stream audio file
      description: |
        Stream the audio file for the specified track. This endpoint supports HTTP range requests
        for efficient streaming in web browsers and media players.

        Features:
        - HTTP Range support for partial content streaming
        - Proper MIME type detection based on file extension
        - CORS headers for web browser compatibility
        - Efficient file streaming with caching headers
      parameters:
        - name: id
          in: path
          description: Track ID
          required: true
          schema:
            type: integer
            format: int32
        - name: Range
          in: header
          description: HTTP Range header for partial content requests (e.g., "bytes=0-1023")
          required: false
          schema:
            type: string
            pattern: '^bytes=\d*-\d*$'
            example: "bytes=0-1023"
      responses:
        '200':
          description: Full audio file content
          headers:
            Content-Type:
              description: MIME type of the audio file
              schema:
                type: string
                example: "audio/mpeg"
            Content-Length:
              description: Size of the audio file in bytes
              schema:
                type: integer
                format: int64
            Accept-Ranges:
              description: Indicates support for range requests
              schema:
                type: string
                enum: ["bytes"]
            Cache-Control:
              description: Cache control header
              schema:
                type: string
                example: "public, max-age=3600"
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
                example: "*"
          content:
            audio/*:
              schema:
                type: string
                format: binary
        '206':
          description: Partial content (range request response)
          headers:
            Content-Type:
              description: MIME type of the audio file
              schema:
                type: string
                example: "audio/mpeg"
            Content-Length:
              description: Size of the requested range in bytes
              schema:
                type: integer
                format: int64
            Content-Range:
              description: Byte range of the partial content
              schema:
                type: string
                example: "bytes 0-1023/2048000"
            Accept-Ranges:
              description: Indicates support for range requests
              schema:
                type: string
                enum: ["bytes"]
            Cache-Control:
              description: Cache control header
              schema:
                type: string
                example: "public, max-age=3600"
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
                example: "*"
          content:
            audio/*:
              schema:
                type: string
                format: binary
        '404':
          description: Track or audio file not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '416':
          description: Range not satisfiable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Tracks
        - Audio Streaming

  /tracks/{id}/albumart:
    get:
      summary: Get album art for track
      description: |
        Retrieve the album art image for the specified track. This endpoint serves
        the embedded album art extracted from the audio file during scanning.

        Features:
        - Serves images in original format (JPEG, PNG, WebP)
        - Proper MIME type detection and headers
        - Long-term caching for efficient delivery
        - CORS headers for web browser compatibility
      parameters:
        - name: id
          in: path
          description: Track ID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Album art image
          headers:
            Content-Type:
              description: MIME type of the image
              schema:
                type: string
                enum: ["image/jpeg", "image/png", "image/webp"]
                example: "image/jpeg"
            Content-Length:
              description: Size of the image file in bytes
              schema:
                type: integer
                format: int64
            Cache-Control:
              description: Cache control header for long-term caching
              schema:
                type: string
                example: "public, max-age=86400"
            Access-Control-Allow-Origin:
              description: CORS header
              schema:
                type: string
                example: "*"
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
        '404':
          description: Track not found or no album art available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Tracks
        - Album Art

  /tracks/search:
    get:
      summary: Search tracks
      description: |
        Search for tracks across title, artist, album, genre, and album artist fields.
        Returns paginated results ordered by artist, album, then title.
      parameters:
        - name: q
          in: query
          description: Search query term
          required: true
          schema:
            type: string
            minLength: 1
        - name: page
          in: query
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: Number of tracks per page (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Successful search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackListResponse'
        '400':
          description: Bad request (missing or empty search query)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Tracks
        - Search

  /stats:
    get:
      summary: Get database statistics
      description: |
        Retrieve statistics about the music library including total tracks,
        total duration, and counts of unique artists, albums, and genres.
      responses:
        '200':
          description: Successful response with library statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackStatsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Statistics

  /artists:
    get:
      summary: Get list of artists
      description: |
        Retrieve a list of all unique artists in the music library,
        ordered alphabetically. Empty artist names are excluded.
      responses:
        '200':
          description: Successful response with artist list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["Beatles, The", "Bob Dylan", "Led Zeppelin", "Pink Floyd"]
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Artists

  /albums:
    get:
      summary: Get list of albums
      description: |
        Retrieve a list of all unique albums in the music library,
        ordered alphabetically. Empty album names are excluded.
      responses:
        '200':
          description: Successful response with album list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["Abbey Road", "Dark Side of the Moon", "Led Zeppelin IV", "The White Album"]
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Albums

  /genres:
    get:
      summary: Get list of genres
      description: |
        Retrieve a list of all unique genres in the music library,
        ordered alphabetically. Empty genre names are excluded.
      responses:
        '200':
          description: Successful response with genre list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["Blues", "Classical", "Jazz", "Rock"]
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Genres

  /rescan:
    post:
      summary: Trigger music library rescan
      description: |
        Initiate a background rescan of the music library.
        The scan process will run asynchronously and update the database
        with any new, modified, or removed tracks.
      responses:
        '200':
          description: Rescan initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RescanResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Library Management

  /lastfm/auth:
    get:
      summary: Get Last.fm authentication URL
      description: |
        Get the Last.fm authentication URL that users need to visit to authorize
        the application to scrobble tracks on their behalf.
      responses:
        '200':
          description: Authentication URL generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LastfmAuthResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Last.fm Integration

  /lastfm/session:
    post:
      summary: Create Last.fm session
      description: |
        Exchange the authorization token from Last.fm for a session key
        that can be used for scrobbling tracks.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LastfmSessionRequest'
      responses:
        '200':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LastfmSessionResponse'
        '400':
          description: Invalid token or authorization failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Last.fm Integration

  /tracks/{id}/scrobble:
    post:
      summary: Scrobble track to Last.fm
      description: |
        Scrobble a track to Last.fm when it has been played for at least
        50% of its duration or for 4 minutes, whichever is less.
      parameters:
        - name: id
          in: path
          description: Track ID
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScrobbleRequest'
      responses:
        '200':
          description: Track scrobbled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScrobbleResponse'
        '400':
          description: Invalid request or scrobble conditions not met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Last.fm session not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Track not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Tracks
        - Last.fm Integration

  /tracks/{id}/now-playing:
    post:
      summary: Update Last.fm now playing status
      description: |
        Update the "now playing" status on Last.fm for the specified track.
        This should be called when a track starts playing.
      parameters:
        - name: id
          in: path
          description: Track ID
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NowPlayingRequest'
      responses:
        '200':
          description: Now playing status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NowPlayingResponse'
        '401':
          description: Last.fm session not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Track not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Tracks
        - Last.fm Integration

components:
  schemas:
    Track:
      type: object
      description: A music track with metadata and technical information
      required:
        - id
        - path
        - extension
        - title
        - artist
        - album
        - genre
        - album_artist
        - publisher
        - catalog_number
        - duration_seconds
        - audio_bitrate
        - overall_bitrate
        - sample_rate
        - bit_depth
        - channels
        - tags
        - created
        - modified
      properties:
        id:
          type: integer
          format: int32
          description: Unique track identifier
          example: 1
        path:
          type: string
          description: File system path to the audio file
          example: "/music/Artists/The Beatles/Abbey Road/01 Come Together.flac"
        extension:
          type: string
          description: File extension of the audio file
          example: "flac"
        title:
          type: string
          description: Track title
          example: "Come Together"
        artist:
          type: string
          description: Track artist
          example: "The Beatles"
        album:
          type: string
          description: Album name
          example: "Abbey Road"
        disc_number:
          type: integer
          format: int32
          nullable: true
          description: Disc number for multi-disc albums
          example: 1
        track_number:
          type: integer
          format: int32
          nullable: true
          description: Track number on the album/disc
          example: 1
        year:
          type: integer
          format: int32
          nullable: true
          description: Release year of the track/album
          example: 1969
        genre:
          type: string
          description: Music genre
          example: "Rock"
        album_artist:
          type: string
          description: Album artist (may differ from track artist)
          example: "The Beatles"
        publisher:
          type: string
          description: Record label or publisher
          example: "Apple Records"
        catalog_number:
          type: string
          description: Catalog number of the release
          example: "PCS 7088"
        duration_seconds:
          type: integer
          format: int32
          description: Track duration in seconds
          example: 259
        audio_bitrate:
          type: integer
          format: int32
          description: Audio bitrate in kbps
          example: 1411
        overall_bitrate:
          type: integer
          format: int32
          description: Overall bitrate in kbps
          example: 1411
        sample_rate:
          type: integer
          format: int32
          description: Sample rate in Hz
          example: 44100
        bit_depth:
          type: integer
          format: int32
          description: Bit depth
          example: 16
        channels:
          type: integer
          format: int32
          description: Number of audio channels
          example: 2
        tags:
          type: object
          description: Additional metadata tags as JSON object
          example: {"MUSICBRAINZ_TRACKID": "abc123", "REPLAYGAIN_TRACK_GAIN": "-3.2 dB"}
        album_art_path:
          type: string
          nullable: true
          description: File system path to the extracted album art image
          example: "/music/Artists/The Beatles/Abbey Road/.album_art/cover.jpg"
        album_art_mime_type:
          type: string
          nullable: true
          description: MIME type of the album art image
          enum: ["image/jpeg", "image/png", "image/webp"]
          example: "image/jpeg"
        album_art_size:
          type: integer
          format: int32
          nullable: true
          description: Size of the album art file in bytes
          example: 102400
        created:
          type: string
          format: date-time
          description: When the track was first added to the database
          example: "2024-06-07T22:47:21Z"
        modified:
          type: string
          format: date-time
          description: When the track was last modified in the database
          example: "2024-06-07T22:47:21Z"

    TrackListResponse:
      type: object
      description: Paginated list of tracks
      required:
        - tracks
        - total
        - page
        - per_page
        - total_pages
      properties:
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
          description: Array of tracks for the current page
        total:
          type: integer
          format: int64
          description: Total number of tracks matching the query
          example: 1250
        page:
          type: integer
          format: int64
          description: Current page number (1-based)
          example: 1
        per_page:
          type: integer
          format: int64
          description: Number of tracks per page
          example: 20
        total_pages:
          type: integer
          format: int64
          description: Total number of pages
          example: 63

    TrackStatsResponse:
      type: object
      description: Music library statistics
      required:
        - total_tracks
        - total_duration_seconds
        - unique_artists
        - unique_albums
        - unique_genres
      properties:
        total_tracks:
          type: integer
          format: int64
          description: Total number of tracks in the library
          example: 1250
        total_duration_seconds:
          type: integer
          format: int64
          description: Total duration of all tracks in seconds
          example: 267890
        unique_artists:
          type: integer
          format: int64
          description: Number of unique artists
          example: 89
        unique_albums:
          type: integer
          format: int64
          description: Number of unique albums
          example: 156
        unique_genres:
          type: integer
          format: int64
          description: Number of unique genres
          example: 12

    RescanResponse:
      type: object
      description: Response from rescan operation
      required:
        - message
        - status
      properties:
        message:
          type: string
          description: Human-readable message about the rescan operation
          example: "Music library rescan initiated"
        status:
          type: string
          description: Status of the rescan request
          example: "success"

    Error:
      type: object
      description: Error response
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
          example: "Track not found"

    LastfmAuthResponse:
      type: object
      description: Last.fm authentication URL response
      required:
        - auth_url
        - token
      properties:
        auth_url:
          type: string
          description: URL that users need to visit to authorize the application
          example: "https://www.last.fm/api/auth/?api_key=YOUR_API_KEY&token=TOKEN"
        token:
          type: string
          description: Authorization token that will be used to create a session
          example: "abcd1234efgh5678"

    LastfmSessionRequest:
      type: object
      description: Request to create Last.fm session
      required:
        - token
      properties:
        token:
          type: string
          description: Authorization token received after user authorization
          example: "abcd1234efgh5678"

    LastfmSessionResponse:
      type: object
      description: Last.fm session creation response
      required:
        - session_key
        - username
        - message
      properties:
        session_key:
          type: string
          description: Session key for authenticated Last.fm requests
          example: "xyz789abc123def456"
        username:
          type: string
          description: Last.fm username
          example: "music_lover_2024"
        message:
          type: string
          description: Success message
          example: "Last.fm session created successfully"

    ScrobbleRequest:
      type: object
      description: Request to scrobble a track
      required:
        - session_key
        - timestamp
      properties:
        session_key:
          type: string
          description: Last.fm session key for the authenticated user
          example: "xyz789abc123def456"
        timestamp:
          type: integer
          format: int64
          description: Unix timestamp when the track started playing
          example: 1640995200
        album_artist:
          type: string
          description: Override album artist for scrobbling (optional)
          example: "The Beatles"

    NowPlayingRequest:
      type: object
      description: Request to update now playing status
      required:
        - session_key
      properties:
        session_key:
          type: string
          description: Last.fm session key for the authenticated user
          example: "xyz789abc123def456"

    ScrobbleResponse:
      type: object
      description: Response from scrobbling a track
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Whether the scrobble was successful
          example: true
        message:
          type: string
          description: Result message
          example: "Track scrobbled successfully"
        scrobble_id:
          type: string
          description: Last.fm scrobble ID (if provided by Last.fm)
          example: "12345"

    NowPlayingResponse:
      type: object
      description: Response from updating now playing status
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Whether the now playing update was successful
          example: true
        message:
          type: string
          description: Result message
          example: "Now playing status updated successfully"

tags:
  - name: Tracks
    description: Operations for managing and querying music tracks
  - name: Search
    description: Search functionality across the music library
  - name: Statistics
    description: Library statistics and metrics
  - name: Artists
    description: Operations for browsing artists
  - name: Albums
    description: Operations for browsing albums
  - name: Genres
    description: Operations for browsing genres
  - name: Audio Streaming
    description: Operations for streaming audio files
  - name: Album Art
    description: Operations for retrieving album artwork
  - name: Library Management
    description: Operations for managing the music library
  - name: Last.fm Integration
    description: Operations for Last.fm scrobbling and authentication
